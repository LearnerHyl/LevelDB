// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
// DB的内容存储在一组块中，每个块都包含一系列键值对。每个块在存储到文件之前可能会被压缩。
// 下面的枚举类型描述了压缩块时使用的压缩方法（如果有的话）。
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  // 注意：不要更改现有条目的值，因为这些值是磁盘上持久格式的一部分。
  kNoCompression = 0x0,
  kSnappyCompression = 0x1,
  kZstdCompression = 0x2,
};

// Options to control the behavior of a database (passed to DB::Open)
// 控制数据库行为的选项（传递给DB::Open）
struct LEVELDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  // 创建一个Options对象，所有字段的默认值都是默认值。
  Options();

  // -------------------
  // Parameters that affect behavior
  // 影响行为的参数

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  // Comparator 用于定义表中键的顺序。
  // 默认：使用字典顺序的比较器，即ByteWiseComparatorImpl类的实例。
  // 
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  // 要求：客户端必须确保此处提供的比较器与之前对同一DB的打开调用提供的比较器具有相同的名称，并且*完全*按照相同的顺序排序键。
  // 通俗来说，就是在打开数据库时，如果使用了自定义的比较器，那么在后续的操作中，也必须使用完全相同的比较器。
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  // 默认是false。若设置为true，表示当数据库不存在时，若调用DB::Open()方法，会创建一个新的数据库。
  bool create_if_missing = false;

  // If true, an error is raised if the database already exists.
  // 默认是false。若设置为true，表示当数据库已经存在时，若调用DB::Open()方法，会抛出一个错误。
  bool error_if_exists = false;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  // 默认是false。若设置为true，表示实现将对其处理的数据进行严格检查，并且如果检测到任何错误，将会提前停止。
  // 这可能会产生意想不到的后果：例如，一个DB条目的损坏可能导致大量条目变得不可读，或者整个DB变得不可打开。
  bool paranoid_checks = false;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  // 环境变量。主要用于与操作系统交互，例如读写文件，调度后台工作等。
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  // 默认是nullptr。若设置为非nullptr，表示在运行时任何由DB生成的内部进度/错误信息将被写入info_log。
  // 若设置为nullptr，则会将这些信息写入到与DB内容相同路径下的文件中。
  Logger* info_log = nullptr;

  // -------------------
  // Parameters that affect performance
  // 影响性能的参数

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  // 默认是4MB。表示在将数据转换为有序的磁盘文件之前，在内存中构建的数据量(由磁盘上的未排序日志支持)。
  // 通俗来说，在内存中构建的这些数据是以未排序的日志的形式存在的，当这些数据量达到了write_buffer_size时，就会将这些数据转换为有序的磁盘文件。
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  // 较大的值会提高性能，特别是在大量加载时。最多可以同时在内存中保存两个写缓冲区，因此您可能希望调整此参数以控制内存使用情况。
  // 此外，较大的写缓冲区将导致下次打开数据库时的恢复时间更长。很容易理解，因为写缓冲区越大，需要转换的数据量就越大，所以恢复时间也就越长。
  size_t write_buffer_size = 4 * 1024 * 1024;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  // 默认是1000。表示DB可以使用的打开文件的数量。如果数据库的工作集很大（一个打开文件的大小预计对应2MB的工作集），则可能需要增加此值。
  int max_open_files = 1000;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).
  // 控制块（用户数据存储在一组块中，块是从磁盘读取的单位）。

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  // 如果非空，则使用指定的缓存块。用户需要自己创建一个Cache对象，并传递给block_cache。
  // 如果为空，leveldb将自动创建并使用一个8MB的内部缓存。
  Cache* block_cache = nullptr;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  // 用户数据每个块的近似大小。请注意，此处指定的块大小对应于未压缩的数据。
  // 如果启用了压缩，则从磁盘读取的实际单元大小可能会更小。
  // 此参数可以动态更改。
  // 通过进一步阅读后面的源码，可以知道这里指的是data block中data部分的大小，
  // 不包括compressType和CRC部分的大小。特指SSTable中的data block、index block
  // 的大小。
  // 注意与log_format.h中定义的kBlockSize不同，log_format中指的是每次读取log文件的block的大小。
  size_t block_size = 4 * 1024;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  // 用于键的增量编码的重启点之间的键的数量。此参数可以动态更改。大多数客户端应该保持此参数不变。
  // 
  // 应用场景：由于LevelDB中的数据是按照key的字典顺序进行存储的，为了提高空间利用率，LevelDB使用了前缀压缩技术。
  // 但是如此一来寻找某个key都必须从第一个key开始遍历才能恢复，因此每间隔block_restart_interval个key，就会全量存储一个key，
  // 并设置一个重启点，这样就可以在这个重启点之后开始查找key，而不需要从第一个key开始遍历。
  int block_restart_interval = 16;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  // 在切换到新文件之前，Leveldb将写入当前文件的最大字节数。
  // 大多数客户端应该保持此参数不变。但是，如果您的文件系统对较大文件更有效，您可以考虑增加该值。
  // 缺点这会导致更长的压缩时间和等待时间。此外，当你需要初始化一个大型数据库时，也可以考虑增加这个参数。
  // 默认是2MB。
  size_t max_file_size = 2 * 1024 * 1024;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  // 使用指定的压缩算法压缩块。此参数可以动态更改。
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  // 默认是kSnappyCompression，这提供了轻量级但快速的压缩。
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  // 通常在Intel(R) Core(TM)2 2.4GHz上kSnappyCompression的速度：
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  // 请注意，这些速度明显快于大多数持久存储速度，因此通常不值得切换到kNoCompression。
  // 即使输入数据是不可压缩的，kSnappyCompression实现也会有效地检测到这一点，并切换到无压缩模式。
  CompressionType compression = kSnappyCompression;

  // Compression level for zstd.
  // Currently only the range [-5,22] is supported. Default is 1.
  // zstd的压缩级别。目前只支持范围[-5,22]。默认是1。
  // 全程是Zstandard，是一种实时压缩算法，它提供了更好的压缩比和更快的压缩速度。
  int zstd_compression_level = 1;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  // 若设置为true，表示在打开数据库时，将追加到现有的MANIFEST和日志文件中。这可以显著加快打开速度。
  // 即可以显著加速open操作。
  //
  // Default: currently false, but may become true later.
  // 默认是false，但以后可能会变为true。
  bool reuse_logs = false;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  // 如果非空，则使用指定的过滤策略来减少磁盘读取。许多应用程序将受益于在这里传递NewBloomFilterPolicy()的结果。
  // 比如，可以使用BloomFilterPolicy来减少磁盘读取。即在读取数据时，可以先通过BloomFilterPolicy来判断数据是否存在，从而减少磁盘读取。
  const FilterPolicy* filter_policy = nullptr;
};

// Options that control read operations
// 控制读操作的选项，主要在DB::Get()方法中使用，下面是三个主要的参数。
struct LEVELDB_EXPORT ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  // 默认是false。若设置为true，表示从底层存储读取的所有数据都将根据相应的校验和进行验证。
  // 若数据损坏，会抛出一个错误。这是为了保证数据的完整性、一致性。
  bool verify_checksums = false;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  // 默认是true。表示在迭代器读取数据时，是否将数据缓存到内存中。
  // 如果设置为false，表示不缓存数据，这样可以减少内存的使用。
  // 通常在进行bulk scans时，可以将此字段设置为false。
  bool fill_cache = true;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  // 如果“snapshot”非空，则按照提供的快照读取（该快照必须属于正在读取的DB，并且不能已被释放）。
  // 如果“snapshot”为空，在读操作的开始阶段，会使用一个隐式的状态快照。
  const Snapshot* snapshot = nullptr;
};

// Options that control write operations
// 控制写操作的选项，主要在DB::Put()方法中使用。
struct LEVELDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  // 默认是false。若设置为true，在某个写操作被认为是完成之前，这个写操作
  // 将从操作系统的缓冲区缓存中flushed到磁盘上（通过调用WritableFile::Sync()方法）。
  // 通俗来说，就是每次数据库写操作后，都会调用fsync()方法，将数据刷到磁盘上。很明显，这样会导致写操作变慢。
  // 如果此标志为true，写操作将会变慢。
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  // 如果此标志为false，并且机器崩溃，一些最近的写操作可能会丢失。
  // 请注意，如果只是进程崩溃（即机器不会重启），即使sync==false，也不会丢失写操作。
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  // 换句话说，sync==false的DB写操作具有与“write()”系统调用相似的崩溃语义。
  // sync==true的DB写操作具有与“write()”系统调用后的“fsync()”相似的崩溃语义。
  bool sync = false;
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
